-
  name: ansible create EC2
  hosts: localhost
  connection: local
  #gather_facts: False
  tags: provisioning

  vars: 
    instance_type: t2.micro
    security_group: wilson-test-WebDMZ
    #image: ami-0756fbca465a59a30
    image: ami-0b898040803850657
    region: us-east-1
    keypair: Wilson-Test-EC2KeyPair
    build_number: "{{ lookup('env','BUILD_NUMBER') }}"
    ec2_tags:
      Name: "Test Deployment"
      app: "test-deployment"
    ec2_current_tag:
      build_number: "{{ build_number }}"    
    instance_tags:
      app: "test-deployment"
      Name: "Test Deployment"    
      version: "{{ build_number }}"      
    count: 1

  tasks: 
    - name: build EC2
      local_action:
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for Newly Created EC2 Instance
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
 

    - name: Launch the new t2 micro EC2 Instance
      local_action: ec2
                      group={{ security_group }}
                      instance_type={{ instance_type}}
                      image={{ image }}
                      wait=true
                      region={{ region }}
                      keypair={{ keypair }}
                      count={{count}}                                
      register: ec2

    - name: ansible filter EC2 by label
      ec2_instance_facts:
        filters:
          instance-state-name: running
          "tag:Name": "Test Deployment"
          "tag:app": "test-deployment"
      register: ec2_facts   

    - name: Wait for EC2 Instance to Spin-up and ready for SSH access
      local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
      with_items: "{{ ec2.instances }}"

    - name: Filter EC2 instances
      set_fact:
        ec2_instances: |
          {% set instances = [] %}
          {% for item in ec2_facts.instances if item.tags.version != build_number -%}
            {{ instances.append(item.instance_id) }}
          {%- endfor %}
          {{ instances }}
    - name: Terminate EC2 server
      ec2:
        region: "{{ aws_region }}"
        instance_ids: "{{ item }}"
        state: 'absent'
      with_items: "{{ ec2_instances }}"