- name: Create and terminate EC2 instances
  hosts: localhost
  connection: local
  gather_facts: no
  
  vars:
    aws_region: "us-east-1"
    build_number: "{{ lookup('env','BUILD_NUMBER') }}"
    ec2_tags:
      Name: "Test Deployment"
      app: "test-deployment"
    ec2_current_tag:
      build_number: "{{ build_number }}"

  tasks:
  - name: ansible create EC2
    ec2:
      key_name: Wilson-Test-EC2KeyPair
      instance_type: t2.micro
      image: ami-0b898040803850657
      wait: yes
      wait_timeout: 500
      count: 1
      region: "{{ aws_region }}"
      instance_tags:
        app: "wilson-test-deployment"
        Name: "Wilson Test Deployment"
        version: "{{ build_number }}"
    register: ec2

  - name: ansible filter EC2 by label
    ec2_instance_facts:
      region: "{{ aws_region }}"
      filters:
        instance-state-name: running
        "tag:Name": "Wilson Test Deployment"
        "tag:app": "wilson-test-deployment"
    register: ec2_facts

  # - name: Update all packages
  #   yum:
  #     name: '*'
  #     state: latest
  #     update_only: yes

  # - name: Ensure a list of yum packages are installed
  #   yum:
  #     name: "{{ packages }}"
  #     state: latest
  #     update_cache: yes
  #   vars:
  #     packages:
  #     - python-pip
  #     - yum-utils
  #     - device-mapper-persistent-data
  #     - lvm2
  #     - amazon-linux-extras

  # - name: Add extras repository
  #   shell: yum-config-manager --enable extras

  # - name: Install docker-ce (centos) via amazon-linux-extras packages
  #   shell: "amazon-linux-extras install docker=18.06.1 -y"

  # - name: Enable Docker CE service at startup
  #   service:
  #     name: docker
  #     state: started
  #     enabled: yes

  # - name: Ensure Python pip packages are installed
  #   pip:
  #     name: "{{ packages }}"
  #   vars:
  #     packages:
  #     - boto
  #     - boto3
  #     - docker-compose

  # - name: pull an image
  #   docker_image:
  #     name: nyuwilson/wilson:jenkinsdockerpush

  # - name: stop all docker containers
  #   shell: docker stop $(docker ps -a -q)
  #   ignore_errors: true

  # - name: service docker
  #   service:
  #     name=docker
  #     state=started
  #     enabled=yes

  # - name: Start docker docker_container
  #   docker_container:
  #     name: nyuwilson
  #     image: nyuwilson/wilson:jenkinsdockerpush
  #     ports:
  #       - "80:80"

  # - name: check if docker is Running
  #   shell: docker ps





  - name: Filter EC2 instances
    set_fact:
      ec2_instances: |
        {% set instances = [] %}
        {% for item in ec2_facts.instances if item.tags.version != build_number -%}
          {{ instances.append(item.instance_id) }}
        {%- endfor %}
        {{ instances }}
  - name: Terminate EC2 server
    ec2:
      region: "{{ aws_region }}"
      instance_ids: "{{ item }}"
      state: 'absent'
    with_items: "{{ ec2_instances }}"