-
  name: ansible create EC2
  hosts: localhost
  connection: local
  #gather_facts: False
  tags: provisioning

  vars: 
    instance_type: t2.micro
    security_group: wilson-test-WebDMZ
    #image: ami-0756fbca465a59a30
    image: ami-0b898040803850657
    region: us-east-1
    keypair: Wilson-Test-EC2KeyPair
    count: 1
    build_number: "{{ lookup('env','BUILD_NUMBER') }}"
    ec2_tags:
      Name: "Wilson Test Deployment"
      app: "wilson-test-deployment"    
    ec2_current_tag:
      build_number: "{{ build_number }}"      

  tasks: 
    - name: build EC2
      local_action:
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for Newly Created EC2 Instance
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0      

    - name: Launch the new t2 micro EC2 Instance
      local_action: ec2
                      group={{ security_group }}
                      instance_type={{ instance_type}}
                      image={{ image }}
                      wait=true
                      region={{ region }}
                      keypair={{ keypair }}
                      count={{count}}
      instance_tags:
        app: "wilson-test-deployment"
        Name: "Wilson Test Deployment"
        version: "{{ build_number }}"                              
      register: ec2


    - name: ansible filter EC2 by label
      ec2_instance_facts:
        region: "{{ region }}"
        filters:
          instance-state-name: running
          "tag:Name": "Wilson Test Deployment"
          "tag:app": "wilson-test-deployment"
      register: ec2_facts

    - name: Filter EC2 instances
      set_fact:
        ec2_instances: |
          {% set instances = [] %}
          {% for item in ec2_facts.instances if item.tags.version != build_number -%}
            {{ instances.append(item.instance_id) }}
          {%- endfor %}
          {{ instances }}
    - name: Terminate EC2 server
      ec2:
        region: "{{ region }}"
        instance_ids: "{{ item }}"
        state: 'absent'
      with_items: "{{ ec2_instances }}"


  # vars:
  #   aws_region: "us-east-2"
  #   build_number: "{{ lookup('env','BUILD_NUMBER') }}"
  #   ec2_tags:
  #     Name: "Wilson Test Deployment"
  #     app: "wilson-test-deployment"
  #   ec2_current_tag:
  #     build_number: "{{ build_number }}"

  # tasks:
  # - name: ansible create EC2
  #   ec2:
  #     keypair: Wilson-Test-EC2KeyPair
  #     instance_type: t2.micro
  #     image: ami-04328208f4f0cf1fe
  #     wait: yes
  #     wait_timeout: 500
  #     count: 5
  #     region: "{{ aws_region }}"
  #     instance_tags:
  #       app: "wilson-test-deployment"
  #       Name: "Wilson Test Deployment"
  #       version: "{{ build_number }}"
  #   register: ec2

  # - name: ansible filter EC2 by label
  #   ec2_instance_facts:
  #     region: "{{ aws_region }}"
  #     filters:
  #       instance-state-name: running
  #       "tag:Name": "Wilson Test Deployment"
  #       "tag:app": "wilson-test-deployment"
  #   register: ec2_facts

  # - name: Filter EC2 instances
  #   set_fact:
  #     ec2_instances: |
  #       {% set instances = [] %}
  #       {% for item in ec2_facts.instances if item.tags.version != build_number -%}
  #         {{ instances.append(item.instance_id) }}
  #       {%- endfor %}
  #       {{ instances }}
  # - name: Terminate EC2 server
  #   ec2:
  #     region: "{{ aws_region }}"
  #     instance_ids: "{{ item }}"
  #     state: 'absent'
  #   with_items: "{{ ec2_instances }}"